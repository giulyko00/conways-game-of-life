<div class="container mt-4">
  <div class="row">
    <div class="col-md-12">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Conway's Game of Life</h1>
        <%= link_to "← Back to Home", root_path, class: "btn btn-outline-secondary" %>
      </div>
      
      <% if notice %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= notice %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% end %>
      
      <% if alert %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= alert %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% end %>
      
      <% if @game_data.present? %>
        <!-- Game Display -->
        <div class="row justify-content-center">
          <div class="col-md-8">
            <div class="card">
              <div class="card-header">
                <div class="d-flex justify-content-between align-items-center mb-3">
                  <h5 class="mb-0">Generation <span id="currentGeneration"><%= @game_data['generation_number'] %></span></h5>
                  <button id="resetGameBtn" class="btn btn-outline-danger btn-sm">Reset</button>
                </div>
                <div class="d-flex gap-2 justify-content-center">
                  <button id="nextGenerationBtn" class="btn btn-primary">Next Generation</button>
                  <button id="autoPlayBtn" class="btn btn-success">Start Auto Play</button>
                  <button id="stopAutoBtn" class="btn btn-warning" style="display: none;">Stop</button>
                </div>
              </div>
              <div class="card-body text-center">
                <div id="gameGrid" class="game-grid">
                  <% @grid.each_with_index do |row, row_index| %>
                    <div class="grid-row">
                      <% row.each_with_index do |cell, col_index| %>
                        <div class="grid-cell <%= cell ? 'alive' : 'dead' %>"></div>
                      <% end %>
                    </div>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
        
      <% else %>
        <!-- Upload Form -->
        <div class="row justify-content-center">
          <div class="col-md-6">
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">Upload Game File</h5>
              </div>
              <div class="card-body">
                <%= form_with url: game_upload_path, multipart: true, local: true do |form| %>
                  <div class="mb-3">
                    <%= form.label :file, "Select Game File", class: "form-label" %>
                    <%= form.file_field :file, class: "form-control", accept: ".txt" %>
                    <div class="form-text">Upload a text file with the game initial state.</div>
                  </div>
                  
                  <div class="d-grid">
                    <%= form.submit "Upload Game", class: "btn btn-primary" %>
                  </div>
                <% end %>
                
                <hr>
                
                <h6>File Format:</h6>
                <pre class="small bg-light p-2 rounded"><code>Generation 0:
5 5
..*..
..*..
..*..
.....
.....</code></pre>
                
                <ul class="small mt-2">
                  <li>First line: <code>Generation N:</code></li>
                  <li>Second line: <code>R C</code> (rows and columns)</li>
                  <li>Next R lines: <code>*</code> for alive, <code>.</code> for dead</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<style>
.game-grid {
  display: inline-block;
  border: 2px solid #333;
  background: #f8f9fa;
}

.grid-row {
  display: flex;
  margin: 0;
  padding: 0;
}

.grid-cell {
  width: 20px;
  height: 20px;
  border: 1px solid #ddd;
  margin: 0;
  padding: 0;
}

.grid-cell.alive {
  background-color: #000;
}

.grid-cell.dead {
  background-color: #fff;
}

.grid-cell:hover {
  opacity: 0.8;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const nextBtn = document.getElementById('nextGenerationBtn');
  const resetBtn = document.getElementById('resetGameBtn');
  const autoPlayBtn = document.getElementById('autoPlayBtn');
  const stopAutoBtn = document.getElementById('stopAutoBtn');
  
  let autoPlayInterval = null;
  let isAutoPlaying = false;
  
  // Manual next generation
  if (nextBtn) {
    nextBtn.addEventListener('click', function() {
      if (isAutoPlaying) return; // Prevent manual clicks during auto-play
      computeNextGeneration();
    });
  }
  
  // Auto-play functionality
  if (autoPlayBtn) {
    autoPlayBtn.addEventListener('click', function() {
      startAutoPlay();
    });
  }
  
  if (stopAutoBtn) {
    stopAutoBtn.addEventListener('click', function() {
      stopAutoPlay();
    });
  }
  
  function startAutoPlay() {
    isAutoPlaying = true;
    autoPlayBtn.style.display = 'none';
    stopAutoBtn.style.display = 'inline-block';
    nextBtn.disabled = true;
    
    // Start with immediate first generation
    computeNextGeneration();
    
    // Then continue every 1 second
    autoPlayInterval = setInterval(() => {
      computeNextGeneration();
    }, 1000);
  }
  
  function stopAutoPlay() {
    isAutoPlaying = false;
    clearInterval(autoPlayInterval);
    autoPlayInterval = null;
    
    autoPlayBtn.style.display = 'inline-block';
    stopAutoBtn.style.display = 'none';
    nextBtn.disabled = false;
  }
  
  function computeNextGeneration() {
    if (!isAutoPlaying) {
      nextBtn.disabled = true;
      nextBtn.textContent = 'Computing...';
    }
    
    fetch('/game/next_generation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        updateGrid(data.grid);
        document.getElementById('currentGeneration').textContent = data.generation;
      } else {
        console.error('Error:', data.error);
        if (isAutoPlaying) {
          stopAutoPlay(); // Stop auto-play on error
        }
        alert('Error: ' + data.error);
      }
    })
    .catch(error => {
      console.error('Error:', error);
      if (isAutoPlaying) {
        stopAutoPlay(); // Stop auto-play on error
      }
      alert('An error occurred while computing the next generation.');
    })
    .finally(() => {
      if (!isAutoPlaying) {
        nextBtn.disabled = false;
        nextBtn.textContent = 'Next Generation';
      }
    });
  }
  
  if (resetBtn) {
    resetBtn.addEventListener('click', function() {
      if (confirm('Are you sure you want to reset the game?')) {
        // Stop auto-play if running
        if (isAutoPlaying) {
          stopAutoPlay();
        }
        
        // Clear session and reload
        fetch('/game/reset', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          }
        })
        .then(response => {
          if (response.ok) {
            window.location.reload();
          } else {
            throw new Error('Reset failed');
          }
        })
        .catch(error => {
          console.error('Reset error:', error);
          // Fallback: reload anyway
          window.location.reload();
        });
      }
    });
  }
  
  function updateGrid(grid) {
    const gridElement = document.getElementById('gameGrid');
    let html = '';
    
    grid.forEach(row => {
      html += '<div class="grid-row">';
      row.forEach(cell => {
        html += `<div class="grid-cell ${cell ? 'alive' : 'dead'}"></div>`;
      });
      html += '</div>';
    });
    
    gridElement.innerHTML = html;
  }
});
</script>
